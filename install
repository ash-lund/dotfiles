#!/usr/bin/env bash

# Setting env to skip redundant commands
export RUNNING_DOTFILES=1

# Install Charms Gum package
KEYRINGS_DIR="/etc/apt/keyrings/";
if [ ! -d "$KEYRINGS_DIR" ]; then
    sudo mkdir -p $KEYRINGS_DIR
    curl -fsSL https://repo.charm.sh/apt/gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/charm.gpg
    echo "deb [signed-by=/etc/apt/keyrings/charm.gpg] https://repo.charm.sh/apt/ * *" | sudo tee /etc/apt/sources.list.d/charm.list
fi

INSTALLABLE=$(gum choose --no-limit --header "What do you wish to install?" "PHP" "Docker" "Composer")

# Install dependencies
sudo apt update && sudo apt upgrade -y

sudo apt install -y \
    vim \
    tmux \
    fzf \
    ripgrep \
    curl \
    wget \
    unzip \
    xclip \
    build-essential \
    ufw \
    zsh \
    gum \
    ninja-build \
    gettext \
    cmake

if [ ! -f "/usr/bin/ghostty" ]; then
    # Install Ghostty
    gum log --structured --time="DateTime" --level info "Installing Ghostty terminal"

    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/mkasberg/ghostty-ubuntu/HEAD/install.sh)"
fi

INSTALL=($(echo "$INSTALLABLE" | tr ',' '\n'))

for value in "${INSTALL[@]}"
do
  ./scripts/install-${value,,}.sh
done

# Install PHP and common extensions
# gum confirm "Install PHP?" && ./scripts/install-php.sh

# Install Composer globally
# gum confirm "Install Composer globally?" && ./scripts/install-composer.sh

# Install Docker and Docker Compose
# gum confirm "Install Docker and Docker Compose?" && ./scripts/install-docker.sh
exit
if [ ! -d "$HOME/code/setup-tmp" ]; then
    gum log --structured --time="DateTime" --level info "Creating setup-tmp folder"

    mkdir -p ~/code/setup-tmp
fi

# Install Oh-My-Zsh and Starship if not installed
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    gum log --structured --time="DateTime" --level info "Setting up zsh and OhMyZsh"

    # Switch from bash to zsh
    chsh -s $(which zsh)

    # Install and setup OhMyZsh
    curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh | sh

    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions

    # Install Starship
    if [ ! -f "$HOME/.config/starship.toml" ]; then
        gum log --structured --time="DateTime" --level info "Installing Starship"

        cd $HOME/code/setup-tmp/
        curl -sS https://starship.rs/install.sh | sh
    fi
fi

# Install PHPActor (used in Neovim)
# gum confirm "Install/update PHPActor?"
if [ ! -f "$HOME/.local/bin/phpactor" ]; then
    gum log --structured --time="DateTime" --level info "Installing/updating PHPActor"

    curl -Lo phpactor.phar https://github.com/phpactor/phpactor/releases/latest/download/phpactor.phar
    chmod a+x phpactor.phar
    mv phpactor.phar ~/.local/bin/phpactor
fi

# Install Neovim
if [ $(dpkg-query -W -f='${Status}' neovim 2>/dev/null | grep -c "ok installed") -eq 0 ]; then
    echo ">> Installing Neovim..."
    cd ~/code/setup-tmp/

    git clone https://github.com/neovim/neovim
    cd neovim && git checkout stable && make CMAKE_BUILD_TYPE=RelWithDebInfo
    cd build && sudo cpack -G DEB && sudo dpkg -i nvim-linux-x86_64.deb
fi

if [ ! -d "$HOME/.fonts" ]; then
    echo ">> Creating .fonts folder..."
    mkdir -p ~/.fonts
fi

if [ ! -f "$HOME/.fonts/JetBrainsMonoNLNerdFont-Thin.ttf" ]; then
    # Setup fonts (from NerdFonts.com)
    echo ">> Downloading JetBrainsMono font from nerdfonts.com..."

    cd ~/.fonts/
    wget https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip
    unzip JetBrainsMono.zip
    rm \
        JetBrainsMono.zip \
        OFL.txt \
        README.md
fi

# Node
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | sh

if [ -d "$HOME/code/setup-tmp" ]; then
    echo ">> Removing setup-tmp folder..."
    sudo rm -rf "$HOME/code/setup-tmp"
fi

unset RUNNING_DOTFILES
